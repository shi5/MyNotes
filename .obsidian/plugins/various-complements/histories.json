{"类加载器":{"类加载器":{"internalLink":{"count":4,"lastUpdated":1711443998531}}},"A.compareTo":{"A.compareTo":{"currentFile":{"count":1,"lastUpdated":1711284422437}}},"类不能被继承，修饰的方法不能被重写，修饰的变量是基本数据类型则值不能改变":{"类不能被继承，修饰的方法不能被重写，修饰的变量是基本数据类型则值不能改变":{"currentFile":{"count":2,"lastUpdated":1711284703123}}},"java基础":{"java基础":{"internalLink":{"count":1,"lastUpdated":1711284854998}}},"HashMap":{"HashMap":{"currentFile":{"count":1,"lastUpdated":1711419013545}}},"可见性：多个线程访问同一个变量时，一个线程修改了这个变量，其他线程能立即看到修改的值":{"可见性：多个线程访问同一个变量时，一个线程修改了这个变量，其他线程能立即看到修改的值":{"currentFile":{"count":1,"lastUpdated":1711440318828}}},"可以防止指令重排序":{"可以防止指令重排序":{"currentFile":{"count":1,"lastUpdated":1711459151639}}},"乐观锁和悲观锁":{"乐观锁和悲观锁":{"currentFile":{"count":1,"lastUpdated":1711460441139}}},"ReentrantLock":{"ReentrantLock":{"currentFile":{"count":1,"lastUpdated":1711462678663}}},"StampedLock":{"StampedLock":{"currentFile":{"count":1,"lastUpdated":1711514245860}}},"ThreadLocal":{"ThreadLocal":{"currentFile":{"count":1,"lastUpdated":1711516376998}}},"。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。":{"。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。":{"currentFile":{"count":1,"lastUpdated":1711517051876}}},"Semaphore":{"Semaphore":{"currentFile":{"count":1,"lastUpdated":1711530314839}}},"String类型的底层实现":{"String类型的底层实现":{"currentFile":{"count":1,"lastUpdated":1713073136532}}},"无界阻塞队列":{"无界阻塞队列":{"currentFile":{"count":1,"lastUpdated":1713074105978}}},"延迟队列和读写锁":{"延迟队列和读写锁":{"internalLink":{"count":1,"lastUpdated":1713075363518}}},"应用场景：":{"应用场景：":{"currentFile":{"count":4,"lastUpdated":1713166453254}}},"跳表相对于：":{"跳表相对于：":{"currentFile":{"count":1,"lastUpdated":1713167283393}}},"多级索引：":{"多级索引：":{"currentFile":{"count":1,"lastUpdated":1713167293285}}},"RDB和AOF混合持久化（Redis":{"RDB和AOF混合持久化（Redis":{"currentFile":{"count":2,"lastUpdated":1713189438074}}},"AOF重写：Redis":{"AOF重写：Redis":{"currentFile":{"count":2,"lastUpdated":1713189183457}}},"Redis":{"Redis":{"internalLink":{"count":1,"lastUpdated":1713256024249}}},"Redis基于Reactor模式设计开发了一套高效的事务处理模型——单线程事件循环和IO多路复用":{"Redis基于Reactor模式设计开发了一套高效的事务处理模型——单线程事件循环和IO多路复用":{"currentFile":{"count":1,"lastUpdated":1713256030200}}},"定期删除：每隔一段时间取出一定数量Key进行过期检查，Redis会限制删除操作的时长和频率来减少对CPU的影响":{"定期删除：每隔一段时间取出一定数量Key进行过期检查，Redis会限制删除操作的时长和频率来减少对CPU的影响":{"currentFile":{"count":1,"lastUpdated":1713257694656}}},"Redis内存淘汰机制：":{"Redis内存淘汰机制：":{"currentFile":{"count":1,"lastUpdated":1713257707053}}},"（对Redis性能影响大":{"（对Redis性能影响大":{"currentFile":{"count":1,"lastUpdated":1713259276560}}}}